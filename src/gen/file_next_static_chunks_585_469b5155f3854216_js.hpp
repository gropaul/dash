
#pragma once
#include "files.hpp"
namespace duckdb {
const File FILE_NEXT_STATIC_CHUNKS_585_469B5155F3854216_JS = {
     // Content
     ""
     ""
     ""
     ""
     ""
     ""
     "YXNlInV1aWQiOmNhc2UidXRmOCI6Y2FzZSJiaXQiOmNhc2UiYml0c3RyaW5nIjpjYXNlImludGVydmFsIjpyZXR1cm4iU3RyaW5nIjtjYXNlImpzb24iOmNhc2Uic3RydWN0IjpyZXR1cm4iU3RydWN0IjtjYXNlImxpc3QiOnJldHVybiJMaXN0IjtjYXNlIm1hcCI6cmV0dXJuIk1hcCI7ZGVmYXVsdDpyZXR1cm4gY29uc29sZS53YXJuKCJVbmhhbmRsZWQgRHVja0RCIHR5cGU6ICIuY29uY2F0KGUpKSwiVW5rbm93biJ9fX0sMjE2Mjc6KGUsdCxhKT0+e2EuZCh0LHtBTjooKT0+aSxMbDooKT0+dSxSOTooKT0+ZCxYejooKT0+bCxaMDooKT0+cixoSjooKT0+byxpNTooKT0+cyxsejooKT0+bix2bTooKT0+Y30pO2xldCBuPSJwYXJhZ3JhcGgiLG89ImhlYWRlciIscz0ibGlzdCIsaT0id2FybmluZyIscj0iZGVsaW1pdGVyIixjPSJzZWxlY3QiLGw9InRleHQtc2VhcmNoIixkPSJyZWxhdGlvbiIsdT0iY2hhcnQifSwyNDc0MTooZSx0LGEpPT57YS5kKHQse0V4OigpPT5tLFZtOigpPT5mfSk7dmFyIG49YSg4NzEwMiksbz1hKDY5MDIzKSxzPWEoMzI0OTYpLGk9YSgzMDExNSk7ZnVuY3Rpb24gcihlKXtyZXR1cm4nIicuY29uY2F0KGkudzUsJyIuIicpLmNvbmNhdCgiY2FjaGUtIi5jb25jYXQoZSksJyInKX1hc3luYyBmdW5jdGlvbiBjKGUpe3RyeXtsZXQgdD1yKGUpO3JldHVybiBhd2FpdCBzLnguZ2V0SW5zdGFuY2UoKS5leGVjdXRlUXVlcnkoIlNFTEVDVCAqIEZST00gIi5jb25jYXQodCwiOyIpKX1jYXRjaChlKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZvaWQgMCl9fWFzeW5jIGZ1bmN0aW9uIGwoZSl7bGV0IHQ9cihlKTtyZXR1cm4gcy54LmdldEluc3RhbmNlKCkuZXhlY3V0ZVF1ZXJ5KCJEUk9QIFRBQkxFIElGIEVYSVNUUyAiLmNvbmNhdCh0LCI7IikpfWFzeW5jIGZ1bmN0aW9uIGQoZSx0KXtsZXQgYT1zLnguZ2V0SW5zdGFuY2UoKSxuPWEuZ2V0RGF0YWJhc2VDb25uZWN0aW9uKCk7aWYoImxvYWRlZCIhPT1uLnN0b3JhZ2VJbmZvLnN0YXRlKXRocm93IEVycm9yKCJEYXRhYmFzZSBjb25uZWN0aW9uIGlzIG5vdCByZWFkeSBvciBub3QgbG9hZGVkLiIpO2xldCBvPW4uc3RvcmFnZUluZm8uZGF0YWJhc2VSZWFkb25seTt0cnl7bGV0IG49ZnVuY3Rpb24oZSx0LGEpe2xldCBuPXIoZSk7cmV0dXJuIHQ9dC50cmltKCkucmVwbGFjZSgvOy9nLCIiKSwiQ1JFQVRFIE9SIFJFUExBQ0UgIi5jb25jYXQoYT8iVEVNUCBUQUJMRSI6IlRBQkxFIiwiICIpLmNvbmNhdChuLCIgQVMgKCIpLmNvbmNhdCh0LCIpOyIpfShlLHQsbyk7YXdhaXQgYS5leGVjdXRlUXVlcnkobik7bGV0IHM9YXdhaXQgYyhlKTtpZighcyl0aHJvdyBFcnJvcigiRmFpbGVkIHRvIGxvYWQgY2FjaGUgZGF0YSBhZnRlciBjcmVhdGluZyBtYXRlcmlhbGl6ZWQgdmlldy4iKTtyZXR1cm57ZGF0YTpzLHdhc0NhY2hlZDohMH19Y2F0Y2gobil7bGV0IGU9YXdhaXQgYS5leGVjdXRlUXVlcnkodCk7cmV0dXJuIGNvbnNvbGUuZXJyb3IoIkZhaWxlZCB0byBjcmVhdGUgbWF0ZXJpYWxpemVkIHZpZXcsIGV4ZWN1dGluZyBxdWVyeSBkaXJlY3RseToiLG4sdCkse2RhdGE6ZSx3YXNDYWNoZWQ6ITF9fX1jbGFzcyB1e3VzZShlKXtsZXQgdD10aGlzLml0ZW1zLmluZGV4T2YoZSk7LTEhPT10JiZ0aGlzLml0ZW1zLnNwbGljZSh0LDEpLHRoaXMuaXRlbXMudW5zaGlmdChlKSx0aGlzLml0ZW1zLmxlbmd0aD50aGlzLmNhcGFjaXR5JiZ0aGlzLml0ZW1zLnBvcCgpfXVzZUFsbChlKXtlLmZvckVhY2goZT0+dGhpcy51c2UoZSkpfWdldEVsZW1lbnRzKCl7cmV0dXJuWy4uLnRoaXMuaXRlbXNdfWdldCBtcnUoKXtyZXR1cm4gdGhpcy5pdGVtc1swXX1nZXQgbHJ1KCl7cmV0dXJuIHRoaXMuaXRlbXNbdGhpcy5pdGVtcy5sZW5ndGgtMV19Y2xlYXIoKXt0aGlzLml0ZW1zPVtdfWdldCBzaXplKCl7cmV0dXJuIHRoaXMuaXRlbXMubGVuZ3RofW1hdGNoZXMoZSl7aWYoZS5sZW5ndGghPT10aGlzLml0ZW1zLmxlbmd0aClyZXR1cm4hMTtmb3IobGV0IHQ9MDt0PGUubGVuZ3RoO3QrKylpZihlW3RdIT09dGhpcy5pdGVtc1t0XSlyZXR1cm4hMTtyZXR1cm4hMH1jb25zdHJ1Y3RvcihlPTEwKXtpZih0aGlzLml0ZW1zPVtdLGU8PTB8fCFOdW1iZXIuaXNGaW5pdGUoZSkpdGhyb3cgRXJyb3IoIkNhcGFjaXR5IG11c3QgYmUgYSBwb3NpdGl2ZSBmaW5pdGUgbnVtYmVyLiIpO3RoaXMuY2FwYWNpdHk9ZX19bGV0IGg9KDAsby5oKSgpKCgwLG4uWnIpKChlLHQpPT4oe2NhY2hlOm5ldyB1KGkucEUpLHVzZTphPT57bGV0IG49dCgpLmNhY2hlO24udXNlKGEpLGUoe2NhY2hlOm59KX0sY2xlYXI6KCk9PmUoe2NhY2hlOm5ldyB1KGkucEUpfSl9KSx7bmFtZToiY2FjaGUtc3RvcmUiLHBhcnRpYWxpemU6ZT0+KHtjYWNoZTplLmNhY2hlLmdldEVsZW1lbnRzKCl9KSxtZXJnZTooZSx0KT0+e2xldCBhPW5ldyB1KGkucEUpO2lmKGUuY2FjaGUpZm9yKGxldCB0IG9mIGUuY2FjaGUpYS51c2UodCk7cmV0dXJuey4uLnQsY2FjaGU6YX19fSkpO2Z1bmN0aW9uIG0oZSl7cmV0dXJuIGYodD0+dC5nZXREYXRhRm9yUmVsYXRpb24oZSkpfWxldCBmPSgwLG8uaCkoKGUsdCk9Pih7ZGF0YTp7fSxyZWNvcmRVc2U6ZT0+e2guZ2V0U3RhdGUoKS51c2UoZSl9LGdldERhdGE6ZT0+e2lmKHQoKS5yZWNvcmRVc2UoZSksZSBpbiB0KCkuZGF0YSlyZXR1cm4gdCgpLmRhdGFbZV07dCgpLnVwZGF0ZURhdGFGcm9tQ2FjaGUoZSl9LGdldERhdGFGb3JSZWxhdGlvbjplPT50KCkuZ2V0RGF0YShlLmlkKSx1cGRhdGVEYXRhOihhLG4pPT4oZShlPT4oe2RhdGE6ey4uLmUuZGF0YSxbYV06bn19KSksdCgpLnJlY29yZFVzZShhKSxuKSx1cGRhdGVEYXRhRnJvbUNhY2hlOmFzeW5jIGU9PntsZXQgYT1hd2FpdCBjKGUpO2lmKGEpcmV0dXJuIHQoKS51cGRhdGVEYXRhKGUsYSl9LHVwZGF0ZURhdGFGcm9tUXVlcnk6YXN5bmMoZSxhKT0+e2xldCBuPWF3YWl0IGQoZSxhKTtyZXR1cm4gdCgpLnVwZGF0ZURhdGEoZSxuLmRhdGEpLG59LGRlbGV0ZURhdGE6YXN5bmMgYT0+e2lmKCF0KCkuZGF0YVthXSl0aHJvdyBFcnJvcigiUmVsYXRpb24gZGF0YSB3aXRoIGlkICIuY29uY2F0KGEsIiBkb2VzIG5vdCBleGlzdCBpbiB0aGUgc3RhdGUiKSk7YXdhaXQgbChhKSxlKGU9PntsZXQgdD17Li4uZS5kYXRhfTtyZXR1cm4gZGVsZXRlIHRbYV0se2RhdGE6dH19KX0sbG9hZExhc3RVc2VkOmFzeW5jKCk9Pntmb3IobGV0IGUgb2YgaC5nZXRTdGF0ZSgpLmNhY2hlLmdldEVsZW1lbnRzKCkpdCgpLmRhdGFbZV18fGF3YWl0IHQoKS51cGRhdGVEYXRhRnJvbUNhY2hlKGUpfX0pKX0sMjY5Mjk6KGUsdCxhKT0+e2EuZCh0LHtGOigpPT5jLEw6KCk9Pmx9KTt2YXIgbj1hKDYzODQzKSxvPWEoOTE2NzApLHM9YSg5MDM1MCksaT1hKDMwMTE1KSxyPWEoOTgzMDgpO2Z1bmN0aW9uIGMoZSl7cmV0dXJuey4uLigwLG8ucjUpKGUpfX1mdW5jdGlvbiBsKGUpe2xldCB0PSgwLHMucikoKSxhPSJ0YWJsZSI9PT1lPyJTRUxFQ1QgJ0hlbGxvLCBXb3JsZCEgXHVEODNFXHVERDg2JyBBUyBtZXNzYWdlOyI6IlNFTEVDVCByYW5nZSBhcyB4LCB4ICogeCBhcyB5IEZST00gcmFuZ2UoLTEwLDExKTsiLGM9KDAsbi5EUikoZSksbD17Y29ubmVjdGlvbklkOmkuTkYsaWQ6dCxuYW1lOiJOZXcgUXVlcnkiLHNvdXJjZTp7dHlwZToicXVlcnkiLGJhc2VRdWVyeTphLGlkOnQsbmFtZToiTmV3IFF1ZXJ5In19LGQ9KDAsbi5OQykobCxjLGEpLHU9KDAsby5wVSkoIk5ldyBEYXRhIEVsZW1lbnQiLHZvaWQgMCxbXSwhMCk7cmV0dXJuIHUuc2VsZWN0ZWRWaWV3PWUsImNoYXJ0Ij09PWUmJih1LmNoYXJ0U3RhdGUuY2hhcnQucGxvdC5jYXJ0ZXNpYW4ueEF4aXM9e2xhYmVsOiJ4Iixjb2x1bW5JZDoieCIsZGVjb3JhdGlvbjooMCxyLkFZKSgwKX0sdS5jaGFydFN0YXRlLmNoYXJ0LnBsb3QuY2FydGVzaWFuLnlBeGVzPVt7bGFiZWw6InkiLGNvbHVtbklkOiJ5IixkZWNvcmF0aW9uOigwLHIuQVkpKDEpfV0sdS5jaGFydFN0YXRlLmNoYXJ0LnBsb3QudHlwZT0ibGluZSIsdS5jaGFydFN0YXRlLmNoYXJ0LnBsb3QuY2FydGVzaWFuLnhBeGlzVHlwZT0idmFsdWUiLHUuY2hhcnRTdGF0ZS52aWV3LnNob3dDb25maWc9ITEpLHsuLi5sLHF1ZXJ5OmQsdmlld1N0YXRlOnUsZXhlY3V0aW9uU3RhdGU6e3N0YXRlOiJub3Qtc3RhcnRlZCJ9fX19LDI3MjAyOihlLHQsYSk9PnthLmQodCx7azY6KCk9PnMsdDE6KCk9Pm8seFA6KCk9PmMsX3Y6KCk9PnJ9KTt2YXIgbj1hKDkwMzUwKTtmdW5jdGlvbiBvKGUsdCxhKXtyZXR1cm4gaShlLHtpZDooMCxuLnIpKCksbmFtZTphfHwiTmV3IEZvbGRlciIsdHlwZToiZm9sZGVyIixjaGlsZHJlbjpbXX0sdCl9ZnVuY3Rpb24gcyhlLHQsYSxuLG8pe3JldHVybiBpKGUse2lkOnQsbmFtZTpuLHR5cGU6YSxjaGlsZHJlbjpudWxsfSxvKX1mdW5jdGlvbiBpKGUsdCxhKXtsZXQgbj1bXTtpZihhKXtsZXQgdD17dHlwZToidXBkYXRlIixpZF9wYXRoOmUsbm9kZTp7Li4uYSxleHBhbmRlZDohMH19O24ucHVzaCh0KX1yZXR1cm4gbi5wdXNoKHt0eXBlOiJhZGQiLGlkX3BhdGg6ZSxub2RlOnR9KSxufWZ1bmN0aW9uIHIoZSx0LGEpe3JldHVyblt7dHlwZToidXBkYXRlIixpZF9wYXRoOmUsbm9kZTp7Li4uYSxuYW1lOnR9fV19ZnVuY3Rpb24gYyhlKXtyZXR1cm5be3R5cGU6InJlbW92ZSIsaWRfcGF0aDplfV19fSwzMDExNTooZSx0LGEpPT57YS5kKHQse01pOigpPT5vLE5GOigpPT5pLFRsOigpPT51LGNUOigpPT5zLGRrOigpPT5uLGVKOigpPT5yLGZDOigpPT5jLGhDOigpPT5tLGppOigpPT5sLHBFOigpPT5kLHc1OigpPT5ofSk7bGV0IG49MTUwLG89ImRhc2guYnVpbGRlcnMiLHM9ImR1Y2tkYi13YXNtIixpPSJkdWNrZGItbG9jYWwiLHI9ImZpbGVzeXN0ZW0iLGM9aSxsPVsiI2VhNTU0NSIsIiNlZGJmMzMiLCIjZWRlMTViIiwiI2JkY2YzMiIsIiM4N2JjNDUiLCIjMjdhZWVmIiwiI2IzM2RjNiIsIiNmNDZhOWIiXSxkPTEsdT1bXSxoPSJkYXNoIixtPXt0YWJsZU5hbWU6InJlbGF0aW9uU3RhdGUiLHNjaGVtYU5hbWU6aH19LDMyNDk2OihlLHQsYSk9PnthLmQodCx7eDooKT0+b30pO3ZhciBuPWEoMzk1NDUpO2NsYXNzIG97c3RhdGljIGdldEluc3RhbmNlKCl7cmV0dXJuIG8uaW5zdGFuY2V8fChvLmluc3RhbmNlPW5ldyBvKSxvLmluc3RhbmNlfW9uRGF0YWJhc2VDb25uZWN0aW9uQ2hhbmdlKGUpe3JldHVybiB0aGlzLmRhdGFiYXNlQ29ubmVjdGlvbkNhbGxiYWNrcy5hZGQoZSksKCk9Pnt0aGlzLmRhdGFiYXNlQ29ubmVjdGlvbkNhbGxiYWNrcy5kZWxldGUoZSl9fW5vdGlmeURhdGFiYXNlQ29ubmVjdGlvbkNoYW5nZSgpe2ZvcihsZXQgZSBvZiB0aGlzLmRhdGFiYXNlQ29ubmVjdGlvbkNhbGxiYWNrcyllKHRoaXMuZGF0YWJhc2VfY29ubmVjdGlvbil9aGFzRGF0YWJhc2VDb25uZWN0aW9uKCl7cmV0dXJuIHZvaWQgMCE9PXRoaXMuZGF0YWJhc2VfY29ubmVjdGlvbn1zZXREYXRhYmFzZUNvbm5lY3Rpb24oZSl7dGhpcy5kYXRhYmFzZV9jb25uZWN0aW9uPWUsdGhpcy5ub3RpZnlEYXRhYmFzZUNvbm5lY3Rpb25DaGFuZ2UoKX1nZXREYXRhYmFzZUNvbm5lY3Rpb24oKXtpZighdGhpcy5kYXRhYmFzZV9jb25uZWN0aW9uKXRocm93IEVycm9yKCJObyBhY3RpdmUgZGF0YWJhc2UgY29ubmVjdGlvbiIpO3JldHVybiB0aGlzLmRhdGFiYXNlX2Nvbm5lY3Rpb259Z2V0U291cmNlQ29ubmVjdGlvbihlKXtyZXR1cm4gdGhpcy5zb3VyY2VfY29ubmVjdGlvbnNbZV19aGFzU291cmNlQ29ubmVjdGlvbihlKXtyZXR1cm4hIXRoaXMuc291cmNlX2Nvbm5lY3Rpb25zW2VdfWFkZFNvdXJjZUNvbm5lY3Rpb25JZk5vdEV4aXN0cyhlKXt0aGlzLnNvdXJjZV9jb25uZWN0aW9uc1tlLmlkXXx8KHRoaXMuc291cmNlX2Nvbm5lY3Rpb25zW2UuaWRdPWUpfWNsZWFyU291cmNlQ29ubmVjdGlvbnMoKXt0aGlzLnNvdXJjZV9jb25uZWN0aW9ucz17fX1hc3luYyBleGVjdXRlUXVlcnkoZSl7aWYoIXRoaXMuZGF0YWJhc2VfY29ubmVjdGlvbil0aHJvdyBFcnJvcigiTm8gYWN0aXZlIGRhdGFiYXNlIGNvbm5lY3Rpb24iKTtyZXR1cm4gYXdhaXQgdGhpcy5kYXRhYmFzZV9jb25uZWN0aW9uLmV4ZWN1dGVRdWVyeShlKX1hc3luYyBnZXREYXRhYmFzZUNvbm5lY3Rpb25TdGF0ZSgpe2lmKCF0aGlzLmRhdGFiYXNlX2Nvbm5lY3Rpb24pdGhyb3cgRXJyb3IoIk5vIGFjdGl2ZSBkYXRhYmFzZS"
     ""
     "dCB0PWEucm93c1swXSxuPXRbMF0sbz10WzFdLHM9dFsyXTtyZXR1cm4gSlNPTi5wYXJzZSgoYXdhaXQgZS5leGVjdXRlUXVlcnkoIlNFTEVDVCBpZCwgdmFsdWUsIHZlcnNpb24gRlJPTSAiLmNvbmNhdChuLCIuIikuY29uY2F0KG8sIi4iKS5jb25jYXQocykpKS5yb3dzWzBdWzFdKS5zdGF0ZX19fSw0ODk4MTooZSx0LGEpPT57YS5kKHQseyQ6KCk9PmwscjooKT0+Y30pO3ZhciBuPWEoNjI0NTMpLG89YSg0MDE3KSxzPWEoNTMxMDUpLGk9YSg3NTAzNikscj1hKDg4Nzg2KTtsZXQgYz0oMCxpLkYpKCJpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgZ2FwLTIgd2hpdGVzcGFjZS1ub3dyYXAgcm91bmRlZC1tZCB0ZXh0LXNtIGZvbnQtbWVkaXVtIHRyYW5zaXRpb24tY29sb3JzIGZvY3VzLXZpc2libGU6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZy0xIGZvY3VzLXZpc2libGU6cmluZy1yaW5nIGRpc2FibGVkOnBvaW50ZXItZXZlbnRzLW5vbmUgZGlzYWJsZWQ6b3BhY2l0eS01MCBbJl9zdmddOnBvaW50ZXItZXZlbnRzLW5vbmUgWyZfc3ZnXTpzaXplLTQgWyZfc3ZnXTpzaHJpbmstMCIse3ZhcmlhbnRzOnt2YXJpYW50OntkZWZhdWx0OiJiZy1wcmltYXJ5IHRleHQtcHJpbWFyeS1mb3JlZ3JvdW5kIHNoYWRvdyBob3ZlcjpiZy1wcmltYXJ5LzkwIixkZXN0cnVjdGl2ZToiYmctZGVzdHJ1Y3RpdmUgdGV4dC1kZXN0cnVjdGl2ZS1mb3JlZ3JvdW5kIHNoYWRvdy1zbSBob3ZlcjpiZy1kZXN0cnVjdGl2ZS85MCIsb3V0bGluZToiYm9yZGVyIGJvcmRlci1pbnB1dCBiZy1iYWNrZ3JvdW5kIHNoYWRvdy1zbSBob3ZlcjpiZy1hY2NlbnQgaG92ZXI6dGV4dC1hY2NlbnQtZm9yZWdyb3VuZCIsc2Vjb25kYXJ5OiJiZy1zZWNvbmRhcnkgdGV4dC1zZWNvbmRhcnktZm9yZWdyb3VuZCBzaGFkb3ctc20gaG92ZXI6Ymctc2Vjb25kYXJ5LzgwIixnaG9zdDoiaG92ZXI6YmctYWNjZW50IGhvdmVyOnRleHQtYWNjZW50LWZvcmVncm91bmQiLGxpbms6InRleHQtcHJpbWFyeSB1bmRlcmxpbmUtb2Zmc2V0LTQgaG92ZXI6dW5kZXJsaW5lIn0sc2l6ZTp7ZGVmYXVsdDoiaC05IHB4LTQgcHktMiIsc206ImgtOCByb3VuZGVkLW1kIHB4LTMgdGV4dC14cyIsbGc6ImgtMTAgcm91bmRlZC1tZCBweC04IixpY29uOiJoLTkgdy05In19LGRlZmF1bHRWYXJpYW50czp7dmFyaWFudDoiZGVmYXVsdCIsc2l6ZToiZGVmYXVsdCJ9fSksbD1vLmZvcndhcmRSZWYoKGUsdCk9PntsZXR7Y2xhc3NOYW1lOmEsdmFyaWFudDpvLHNpemU6aSxhc0NoaWxkOmw9ITEsLi4uZH09ZSx1PWw/cy5EWDoiYnV0dG9uIjtyZXR1cm4oMCxuLmpzeCkodSx7Y2xhc3NOYW1lOigwLHIuY24pKGMoe3ZhcmlhbnQ6byxzaXplOmksY2xhc3NOYW1lOmF9KSkscmVmOnQsLi4uZH0pfSk7bC5kaXNwbGF5TmFtZT0iQnV0dG9uIn0sNDkwOTM6KGUsdCxhKT0+e2EuZCh0LHt6ZzooKT0+cixNTTooKT0+aX0pO3ZhciBuPWEoMzc5NTgpO2Z1bmN0aW9uIG8oZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsYT1BcnJheSh0PjE/dC0xOjApLG49MTtuPHQ7bisrKWFbbi0xXT1hcmd1bWVudHNbbl07ZSYmY29uc29sZS5sb2coLi4uYSl9bGV0IHM9ImxvY2FsLmR1Y2tkYiI7YXN5bmMgZnVuY3Rpb24gaSgpe2F3YWl0IHIuZ2V0SW5zdGFuY2UoKS5kZXN0cm95KCk7bGV0IGU9IiIuY29uY2F0KHMsIi53YWwiKSx0PWF3YWl0IG5hdmlnYXRvci5zdG9yYWdlLmdldERpcmVjdG9yeSgpO2F3YWl0IHQucmVtb3ZlRW50cnkocyksYXdhaXQgdC5yZW1vdmVFbnRyeShlKX1jbGFzcyBye3N0YXRpYyBnZXRJbnN0YW5jZSgpe3JldHVybiByLmluc3RhbmNlfHwoci5pbnN0YW5jZT1uZXcgciksci5pbnN0YW5jZX1hc3luYyBkZXN0cm95KCl7dGhpcy5jb24mJihhd2FpdCB0aGlzLmNvbi5jbG9zZSgpLHRoaXMuY29uPW51bGwpLHRoaXMuZGImJihhd2FpdCB0aGlzLmRiLnRlcm1pbmF0ZSgpLHRoaXMuZGI9bnVsbCksdGhpcy5hc3luY0R1Y2tEQlN0YXRlPSJ1bmluaXRpYWxpc2VkIix0aGlzLmluaXRQcm9taXNlPW51bGwsY29uc29sZS5sb2coIkR1Y2tEQi1XYXNtIGluc3RhbmNlIGRlc3Ryb3llZC4iKSx0aGlzLmNvb3JkaW5hdG9yLnJlbGVhc2VPd25lcnNoaXAoKX1zdGF0aWMgZ2V0RGF0YWJhc2VQYXRoKCl7cmV0dXJuIm9wZnM6Ly8iLmNvbmNhdChzKX1hc3luYyBnZXRDdXJyZW50V2FzbSgpe3JldHVybiJpbml0aWFsaXNlZCI9PT10aGlzLmFzeW5jRHVja0RCU3RhdGUmJnRoaXMuY29uJiZ0aGlzLmRiP3tkYjp0aGlzLmRiLGNvbjp0aGlzLmNvbn06KCJpbml0aWFsaXNpbmciPT09dGhpcy5hc3luY0R1Y2tEQlN0YXRlJiZ0aGlzLmluaXRQcm9taXNlfHwodGhpcy5hc3luY0R1Y2tEQlN0YXRlPSJpbml0aWFsaXNpbmciLHRoaXMuaW5pdFByb21pc2U9dGhpcy5faW5pdER1Y2tEQldhc20oKS50aGVuKGU9PntsZXR7ZGI6dCxjb246YX09ZTtyZXR1cm4gdGhpcy5jb249YSx0aGlzLmFzeW5jRHVja0RCU3RhdGU9ImluaXRpYWxpc2VkIix0aGlzLmRiPXQsZX0pLmNhdGNoKGU9Pnt0aHJvdyB0aGlzLmFzeW5jRHVja0RCU3RhdGU9InVuaW5pdGlhbGlzZWQiLHRoaXMuY29uPW51bGwsdGhpcy5pbml0UHJvbWlzZT1udWxsLGV9KSksdGhpcy5pbml0UHJvbWlzZSl9YXN5bmMgX2luaXREdWNrREJXYXNtKCl7IWZ1bmN0aW9uKCl7bGV0e2hvc3RuYW1lOmUscHJvdG9jb2w6dH09d2luZG93LmxvY2F0aW9uLGE9ImxvY2FsaG9zdCI9PT1lfHwiMTI3LjAuMC4xIj09PWV8fGUuZW5kc1dpdGgoIi5sb2NhbGhvc3QiKTtpZighd2luZG93LmlzU2VjdXJlQ29udGV4dCYmIWEmJiJodHRwczoiIT09dCl0aHJvdyBFcnJvcigiT1BGUyBpcyBvbmx5IGF2YWlsYWJsZSBpbiBzZWN1cmUgY29udGV4dHMgKEhUVFBTIG9yIGxvY2FsaG9zdCkuICIrIkN1cnJlbnQgb3JpZ2luOiAiLmNvbmNhdCh0LCIvLyIpLmNvbmNhdChlKSk7aWYoISgidW5kZWZpbmVkIiE9dHlwZW9mIG5hdmlnYXRvciYmbmF2aWdhdG9yLnN0b3JhZ2UmJiJnZXREaXJlY3RvcnkiaW4gbmF2aWdhdG9yLnN0b3JhZ2UpKXRocm93IEVycm9yKCJUaGlzIGJyb3dzZXIgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBPcmlnaW7igJFQcml2YXRlIEZpbGUgU3lzdGVtIEFQSSAobmF2aWdhdG9yLnN0b3JhZ2UuZ2V0RGlyZWN0b3J5KS4gRHVja0RC4oCRV2FzbSBjYW5ub3QgdXNlIE9QRlMgaGVyZS4iKX0oKSxhd2FpdCB0aGlzLmNvb3JkaW5hdG9yLnJlcXVlc3RPd25lcnNoaXAoKXx8KHRoaXMuY29vcmRpbmF0b3Iubm90ZVNlcnZlckNvbmZsaWN0KCJBbm90aGVyIHRhYiBpcyB1c2luZyB0aGUgZGF0YWJhc2UiKSxhd2FpdCB0aGlzLmNvb3JkaW5hdG9yLndhaXRGb3JSZWxlYXNlKCksYXdhaXQgdGhpcy5jb29yZGluYXRvci5yZXF1ZXN0T3duZXJzaGlwKCk/Y29uc29sZS5sb2coIkFjcXVpcmVkIG93bmVyc2hpcCBvZiB0aGUgRHVja0RCLVdhc20gZGF0YWJhc2UgYWZ0ZXIgd2FpdGluZyBmb3IgcmVsZWFzZS4iKTpjb25zb2xlLmVycm9yKCJGYWlsZWQgdG8gYWNxdWlyZSBvd25lcnNoaXAgb2YgdGhlIER1Y2tEQi1XYXNtIGRhdGFiYXNlIGFmdGVyIHdhaXRpbmcgZm9yIHJlbGVhc2UuIikpO2xldCBlPXRoaXMuY29vcmRpbmF0b3Iuc3Vic2NyaWJlKGFzeW5jIHQ9Pnt0fHwiaW5pdGlhbGlzZWQiIT09dGhpcy5hc3luY0R1Y2tEQlN0YXRlfHwoYXdhaXQgdGhpcy5kZXN0cm95KCksZSgpKX0pLHQ9bi52UCgpLGE9YXdhaXQgbi5ERih0KSxvPVVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoWydpbXBvcnRTY3JpcHRzKCInLmNvbmNhdChhLm1haW5Xb3JrZXIsJyIpOycpXSx7dHlwZToidGV4dC9qYXZhc2NyaXB0In0pKSxzPW5ldyBXb3JrZXIobyksaT1uLiRiLkVSUk9SLGM9bmV3IG4uQ3IoaSksbD1uZXcgbi5FZChjLHMpO2F3YWl0IGwuaW5zdGFudGlhdGUoYS5tYWluTW9kdWxlLGEucHRocmVhZFdvcmtlciksVVJMLnJldm9rZU9iamVjdFVSTChvKTt0cnl7YXdhaXQgbC5vcGVuKHtwYXRoOnIuZ2V0RGF0YWJhc2VQYXRoKCksYWNjZXNzTW9kZTpuLmZpLlJFQURfV1JJVEUscXVlcnk6e2Nhc3RCaWdJbnRUb0RvdWJsZTohMCxjYXN0VGltZXN0YW1wVG9EYXRlOiEwLGNhc3REZWNpbWFsVG9Eb3VibGU6ITAsY2FzdER1cmF0aW9uVG9UaW1lNjQ6ITB9fSl9Y2F0Y2goZSl7dGhyb3cgY29uc29sZS5lcnJvcigiRmFpbGVkIHRvIG9wZW4gb3IgY3JlYXRlIHRoZSBkYXRhYmFzZToiLGUpLGV9bGV0IGQ9YXdhaXQgbC5jb25uZWN0KCk7cmV0dXJuIGF3YWl0IGQucXVlcnkoIkNSRUFURSBPUiBSRVBMQUNFIFRBQkxFIGRhc2hfd3JpdGVfdGVzdF90YWJsZSBBUyBTRUxFQ1QgMSBhcyBhOyIpLGF3YWl0IGQucXVlcnkoIkRST1AgVEFCTEUgZGFzaF93cml0ZV90ZXN0X3RhYmxlOyIpLHtkYjpsLGNvbjpkfX1jb25zdHJ1Y3Rvcigpe3RoaXMuYXN5bmNEdWNrREJTdGF0ZT0idW5pbml0aWFsaXNlZCIsdGhpcy5kYj1udWxsLHRoaXMuY29uPW51bGwsdGhpcy5pbml0UHJvbWlzZT1udWxsLHRoaXMuY29vcmRpbmF0b3I9ZnVuY3Rpb24oZSl7dmFyIHQsYSxuO2xldCBzPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0saT1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e30se2hhbmRzaGFrZU1zOnI9MjAwLGNoYW5uZWxQcmVmaXg6Yz0ibXlhcHAifT1pLGw9IiIuY29uY2F0KGMsIjpkYi1jb25uOiIpLmNvbmNhdChlLCI6djEiKSxkPSIiLmNvbmNhdChsLCI6ZXZlbnQiKSx1PSIiLmNvbmNhdChsLCI6c25hcHNob3QiKSxoPW51bGwhPT0obj1udWxsPT09KGE9Y3J5cHRvKXx8dm9pZCAwPT09YT92b2lkIDA6bnVsbD09PSh0PWEucmFuZG9tVVVJRCl8fHZvaWQgMD09PXQ/dm9pZCAwOnQuY2FsbChhKSkmJnZvaWQgMCE9PW4/bjoiIi5jb25jYXQoRGF0ZS5ub3coKSwiLSIpLmNvbmNhdChNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDE2KS5zbGljZSgyKSksbT0hMSxmPW51bGwscD1uZXcgU2V0LGc9KCk9Pntmb3IobGV0IGUgb2YgcCllKG0pfSx5PSJCcm9hZGNhc3RDaGFubmVsImluIHdpbmRvdz9uZXcgQnJvYWRjYXN0Q2hhbm5lbChsKTpudWxsLGI9ZT0+e2lmKHkpeS5wb3N0TWVzc2FnZShlKTtlbHNlIHRyeXtsb2NhbFN0b3JhZ2Uuc2V0SXRlbShkLEpTT04uc3RyaW5naWZ5KGUpKX1jYXRjaChlKXt9fSx3PSgpPT57dHJ5e2xldCBlPWxvY2FsU3RvcmFnZS5nZXRJdGVtKHUpO3JldHVybiBlP0pTT04ucGFyc2UoZSk6bnVsbH1jYXRjaChlKXtyZXR1cm4gbnVsbH19LHg9ZT0+e3RyeXtsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh1LEpTT04uc3RyaW5naWZ5KHtvd25lcklkOmUsdHM6RGF0ZS5ub3coKX0pKX1jYXRjaChlKXt9fSx2PShlLHQpPT57bT1lLGY9dCxvKHMsIlRhYiAiLmNvbmNhdChoLCIgaXNPd25lcj0iKS5jb25jYXQobSwiIG93bmVySWQ9IikuY29uY2F0KGYpKSxnKCl9LFM9KCk9Pnt2KCEwLGgpLHgoaCksYih7dHlwZToiQ0xBSU0iLGlkOmgsdHM6RGF0ZS5ub3coKX0pfSxrPWU9PntpZihlJiYib2JqZWN0Ij09dHlwZW9mIGUpc3dpdGNoKG8ocywiVGFiICIuY29uY2F0KGgsIiByZWNlaXZlZCBtZXNzYWdlIiksZSksZS50eXBlKXtjYXNlIkNMQUlNIjplLmlkIT09aCYmKHYoITEsZS5pZCkseChlLmlkKSk7YnJlYWs7Y2FzZSJSRUxFQVNFIjpjYXNlIlJFTEVBU0VEIjplLmlkIT09aCYmKHYoITEsbnVsbCkseChudWxsKSk7YnJlYWs7Y2FzZSJQTEVBU0VfUkVMRUFTRSI6bSYmKHYoITEsbnVsbCkseChudWxsKSxiKHt0eXBlOiJSRUxFQVNFRCIsaWQ6aCx0czpEYXRlLm5vdygpfSkpO2JyZWFrO2Nhc2UiSVNfVEhFUkVfQU5fT1dORVIiOntsZXQgZT13KCk7aWYobyhzLCJTbmFwc2hvdCBkdXJpbmcgaGFuZHNoYWtlOiIsZSksbSl7dmFyIHQ7byhzLCJUYWIgIi5jb25jYXQoaCwiIGFuc3dlcmluZyBoYW5kc2hha2UgYXMgb3duZXIiKSk7bGV0IGE9bT9oOm51bGwhPT0odD1udWxsPT1lP3ZvaWQgMDplLm93bmVySWQpJiZ2b2lkIDAhPT10P3Q6bnVsbDtiKHt0eXBlOiJJX0FNX1RIRV9PV05FUiIsaWQ6aCx0czpEYXRlLm5vdygpLG93bmVySWQ6YX0pfWVsc2UgbyhzLCJUYWIgIi5jb25jYXQoaCwiIGlzIG5vdCBvd25lciwgc3RheWluZyBzaWxlbnQiKSl9fX0sTj1lPT5rKGUuZGF0YSksRT1lPT57aWYoZS5rZXk9PT1kJiZlLm5ld1ZhbHVlKX"
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     "50aXR5KCJyZWxhdGlvbnMiLGMsaSk7ZWxzZXtsZXQgbj0oMCxvLkRSKSgidGFibGUiKSxjPWF3YWl0ICgwLG8uam0pKGEscyxuLHtzdGF0ZToicnVubmluZyJ9KSxsPSgwLGQuS1QpKHQoKS5lZGl0b3JFbGVtZW50cyxpKSxtPSgwLHUuazYpKGksciwicmVsYXRpb25zIixjLnZpZXdTdGF0ZS5kaXNwbGF5TmFtZSxsKSxmPSgwLGQudzgpKHQoKS5lZGl0b3JFbGVtZW50cyxtKTtlKGU9Pih7cmVsYXRpb25zOnsuLi5lLnJlbGF0aW9ucyxbcl06Y30sZWRpdG9yRWxlbWVudHM6Zn0pKSxoLm8uZ2V0U3RhdGUoKS5hZGRFbnRpdHlUYWIoInJlbGF0aW9ucyIsYyk7bGV0IHA9YXdhaXQgKDAsby5vTykoYyk7ZShlPT4oe3JlbGF0aW9uczp7Li4uZS5yZWxhdGlvbnMsW3JdOnB9fSkpfX0sdXBkYXRlUmVsYXRpb25EYXRhV2l0aFBhcmFtczphc3luYyhhLG4pPT57bGV0e3JlbGF0aW9uczpzfT10KCksaT1zW2FdLHI9KDAsby5qOSkoaSk7ZShlPT4oe3JlbGF0aW9uczp7Li4uZS5yZWxhdGlvbnMsW2FdOnJ9fSkpO3RyeXtsZXQgdD1hd2FpdCAoMCxvLiRmKShyLG4pLHM9YXdhaXQgKDAsby5vTykodCk7ZShlPT4oe3JlbGF0aW9uczp7Li4uZS5yZWxhdGlvbnMsW2FdOnN9fSkpfWNhdGNoKG4pe2xldCB0PSgwLG8uVGkpKHIsbik7ZShlPT4oe3JlbGF0aW9uczp7Li4uZS5yZWxhdGlvbnMsW2FdOnR9fSkpfX0sdXBkYXRlUmVsYXRpb25CYXNlUXVlcnk6KHQsYSk9PntlKGU9Pih7cmVsYXRpb25zOnsuLi5lLnJlbGF0aW9ucyxbdF06ey4uLmUucmVsYXRpb25zW3RdLHF1ZXJ5OnsuLi5lLnJlbGF0aW9uc1t0XS5xdWVyeSxiYXNlUXVlcnk6YX19fX0pKX0sc2V0UmVsYXRpb25WaWV3U3RhdGU6KHQsYSk9PntlKGU9Pih7cmVsYXRpb25zOnsuLi5lLnJlbGF0aW9ucyxbdF06ey4uLmUucmVsYXRpb25zW3RdLHZpZXdTdGF0ZTphfX19KSl9LGdldFJlbGF0aW9uVmlld1N0YXRlOmU9PnQoKS5yZWxhdGlvbnNbZV0udmlld1N0YXRlLHVwZGF0ZVJlbGF0aW9uVmlld1N0YXRlOihhLG4sbyk9PntsZXQgaT0oMCxzLkdvKSh0KCkucmVsYXRpb25zW2FdLnZpZXdTdGF0ZSkscj10KCkuZWRpdG9yRWxlbWVudHM7aWYobi5kaXNwbGF5TmFtZSl7aWYoaC5vLmdldFN0YXRlKCkucmVuYW1lVGFiKGEsbi5kaXNwbGF5TmFtZSksIW8pdGhyb3cgRXJyb3IoIlBhdGggbXVzdCBiZSBwcm92aWRlZCBpZiBkaXNwbGF5TmFtZSBpcyB1cGRhdGVkIik7bGV0IGU9KDAsZC5LVCkocixvKSx0PSgwLHUuX3YpKG8sbi5kaXNwbGF5TmFtZSxlKTtyPSgwLGQudzgpKHIsdCl9aWYoKDAscy5oeikoaSxuKSxlKGU9Pih7cmVsYXRpb25zOnsuLi5lLnJlbGF0aW9ucyxbYV06ey4uLmUucmVsYXRpb25zW2FdLHZpZXdTdGF0ZTppfX0sZWRpdG9yRWxlbWVudHM6cn0pKSxuLnNlbGVjdGVkVmlldyl7bGV0IGU9ey4uLnQoKS5yZWxhdGlvbnNbYV0ucXVlcnkudmlld1BhcmFtZXRlcnMsdHlwZTpuLnNlbGVjdGVkVmlld307dCgpLnVwZGF0ZVJlbGF0aW9uRGF0YVdpdGhQYXJhbXMoYSxlKX19LGNsb3NlVGFiOmE9PntsZXR7c2NoZW1hczpuLGRhdGFiYXNlczpvLHJlbGF0aW9uczpzLGRhc2hib2FyZHM6aX09dCgpO2lmKG5bYV0pe2xldCB0PXsuLi5ufTtkZWxldGUgdFthXSxlKHtzY2hlbWFzOnR9KX1lbHNlIGlmKG9bYV0pe2xldCB0PXsuLi5vfTtkZWxldGUgdFthXSxlKHtkYXRhYmFzZXM6dH0pfWVsc2Ugc1thXT9lKHtyZWxhdGlvbnM6ey4uLnN9fSk6aVthXSYmZSh7ZGFzaGJvYXJkczp7Li4uaX19KX0sdXBkYXRlRWRpdG9yRWxlbWVudHM6KGEsbik9PntsZXQgbz1bLi4udCgpLmVkaXRvckVsZW1lbnRzXSxzPSgwLGQuT0spKG8sYSxuKTtlKCgpPT4oe2VkaXRvckVsZW1lbnRzOnN9KSl9LGFkZEVkaXRvckVsZW1lbnQ6KGEsbik9PntsZXQgbz1bLi4udCgpLmVkaXRvckVsZW1lbnRzXSxzPSgwLGQuaXUpKG8sYSxuKTtlKCgpPT4oe2VkaXRvckVsZW1lbnRzOnN9KSl9LHJlbW92ZUVkaXRvckVsZW1lbnQ6YT0+e2xldCBuPVsuLi50KCkuZWRpdG9yRWxlbWVudHNdLG89ey4uLnQoKS5yZWxhdGlvbnN9LHM9ey4uLnQoKS5kYXNoYm9hcmRzfSxpPSgwLGQuS1QpKG4sYSk7aWYoIWkpdGhyb3cgRXJyb3IoIkVsZW1lbnQgdG8gcmVtb3ZlIG5vdCBmb3VuZCIpOygwLGQuVW4pKFtpXSwoZSx0KT0+eyJkYXNoYm9hcmRzIj09PWUudHlwZT8oaC5vLmdldFN0YXRlKCkuaXNUYWJPcGVuKGUuaWQpJiZoLm8uZ2V0U3RhdGUoKS5yZW1vdmVUYWIoZS5pZCksZGVsZXRlIHNbZS5pZF0pOiJyZWxhdGlvbnMiPT09ZS50eXBlJiYoaC5vLmdldFN0YXRlKCkuaXNUYWJPcGVuKGUuaWQpJiZoLm8uZ2V0U3RhdGUoKS5yZW1vdmVUYWIoZS5pZCksZGVsZXRlIG9bZS5pZF0pfSk7bGV0IHI9KDAsZC5iZikobixhKTtlKCgpPT4oe2VkaXRvckVsZW1lbnRzOnIscmVsYXRpb25zOm8sZGFzaGJvYXJkczpzfSkpfSxhcHBseUVkaXRvckVsZW1lbnRzQWN0aW9uczphPT57bGV0IG49Wy4uLnQoKS5lZGl0b3JFbGVtZW50c10sbz0oMCxkLklBKShuLGEpO2UoKCk9Pih7ZWRpdG9yRWxlbWVudHM6b30pKX0scmVzZXRFZGl0b3JFbGVtZW50czooKT0+e2UoKCk9Pih7ZWRpdG9yRWxlbWVudHM6W119KSl9LG1hbnVhbFBlcnNpc3RNb2RlbDooKT0+e2UoKCk9Pih7fSkpfX0pLHtuYW1lOm0uaEMudGFibGVOYW1lLHN0b3JhZ2U6KDAsZi53SikoKSxvblJlaHlkcmF0ZVN0b3JhZ2U6ZT0+ZnVuY3Rpb24oZSx0KXtpZihjb25zb2xlLmxvZygiUmVoeWRyYXRpb24gb2YgcmVsYXRpb25zIHN0YXRlIGNvbXBsZXRlZC4iLHtzdGF0ZTplLGVycm9yOnR9KSx0JiZjb25zb2xlLmVycm9yKHQpLHZvaWQgMD09PWUpcmV0dXJuIGcuSi5nZXRTdGF0ZSgpLm9uUmVsYXRpb25TdGF0ZUxvYWRlZEZyb21Db25uZWN0aW9uKFtdKSx4O2xldCBhPXcuZ2V0U3RhdGUoKS5oYXNEdWNrREJTdG9yYWdlO2lmKGNvbnNvbGUubG9nKCJIYXMgRHVja0RCIFN0b3JhZ2U6IixhKSxhKXtsZXQgdD1bXTtpZihlLnJlbGF0aW9ucylmb3IobGV0IGEgaW4gZS5yZWxhdGlvbnMpdC5wdXNoKGEpO2lmKGUuc2NoZW1hcylmb3IobGV0IGEgaW4gZS5zY2hlbWFzKXQucHVzaChhKTtpZihlLmRhdGFiYXNlcylmb3IobGV0IGEgaW4gZS5kYXRhYmFzZXMpdC5wdXNoKGEpO2lmKGUuZGFzaGJvYXJkcylmb3IobGV0IGEgaW4gZS5kYXNoYm9hcmRzKXQucHVzaChhKTtnLkouZ2V0U3RhdGUoKS5vblJlbGF0aW9uU3RhdGVMb2FkZWRGcm9tQ29ubmVjdGlvbih0KX19fSkpfSw3MzEwMjooZSx0LGEpPT57YS5kKHQse0JjOigpPT5yLFpJOigpPT5kLGskOigpPT5sLG1fOigpPT5jfSk7dmFyIG49YSg2MjQ1Myksbz1hKDQwMTcpLHM9YSg2MTkxKSxpPWEoODg3ODYpO2xldCByPXMuS3EsYz1zLmJMLGw9cy5sOSxkPW8uZm9yd2FyZFJlZigoZSx0KT0+e2xldHtjbGFzc05hbWU6YSxzaWRlT2Zmc2V0Om89NCwuLi5yfT1lO3JldHVybigwLG4uanN4KShzLlpMLHtjaGlsZHJlbjooMCxuLmpzeCkocy5VQyx7cmVmOnQsc2lkZU9mZnNldDpvLGNsYXNzTmFtZTooMCxpLmNuKSgiei01MCBvdmVyZmxvdy1oaWRkZW4gcm91bmRlZC1tZCBiZy1wcmltYXJ5IHB4LTMgcHktMS41IHRleHQteHMgdGV4dC1wcmltYXJ5LWZvcmVncm91bmQgYW5pbWF0ZS1pbiBmYWRlLWluLTAgem9vbS1pbi05NSBkYXRhLVtzdGF0ZT1jbG9zZWRdOmFuaW1hdGUtb3V0IGRhdGEtW3N0YXRlPWNsb3NlZF06ZmFkZS1vdXQtMCBkYXRhLVtzdGF0ZT1jbG9zZWRdOnpvb20tb3V0LTk1IGRhdGEtW3NpZGU9Ym90dG9tXTpzbGlkZS1pbi1mcm9tLXRvcC0yIGRhdGEtW3NpZGU9bGVmdF06c2xpZGUtaW4tZnJvbS1yaWdodC0yIGRhdGEtW3NpZGU9cmlnaHRdOnNsaWRlLWluLWZyb20tbGVmdC0yIGRhdGEtW3NpZGU9dG9wXTpzbGlkZS1pbi1mcm9tLWJvdHRvbS0yIixhKSwuLi5yfSl9KX0pO2QuZGlzcGxheU5hbWU9cy5VQy5kaXNwbGF5TmFtZX0sNzY1MjU6KGUsdCxhKT0+e2EuZCh0LHtKOigpPT5XfSk7dmFyIG49YSg2OTAyMyksbz1hKDY2NzQxKSxzPWEoNTE4MjUpO2FzeW5jIGZ1bmN0aW9uIGkoZSl7bGV0IHQ9ZnVuY3Rpb24oZSl7aWYoIWUuaGFzKCJhcGkiKSl7Y29uc29sZS5pbmZvKCJObyBBUEkgcGFyYW1ldGVyIGZvdW5kIik7cmV0dXJufWxldCB0PWUuZ2V0KCJhcGkiKTtzd2l0Y2godCl7Y2FzZSJodHRwIjpsZXQgYSxuPWUuZ2V0KCJ1cmwiKTtpZighbil7bGV0IGU9d2luZG93LmxvY2F0aW9uO249IiIuY29uY2F0KGUucHJvdG9jb2wsIi8vIikuY29uY2F0KGUuaG9zdCl9bGV0IG89Im5vbmUiLHM9ZS5nZXQoImsiKTtyZXR1cm4gcyYmKGE9ZnVuY3Rpb24oZSx0KXtsZXQgYT0iIjtmb3IobGV0IG49MDtuPHQubGVuZ3RoO24rKylhKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHQuY2hhckNvZGVBdChuKV5lLmNoYXJDb2RlQXQobiVlLmxlbmd0aCkpO3JldHVybiBhfSgiRHVja0RCIixzKSxvPSJ0b2tlbiIpLHt0eXBlOiJkdWNrZGItb3Zlci1odHRwIixjb25maWc6e25hbWU6IkR1Y2tEQiIsdXJsOm4sdXNlVG9rZW46InRva2VuIj09PW8sdG9rZW46YX19O2Nhc2Uid2FzbSI6cmV0dXJue3R5cGU6ImR1Y2tkYi13YXNtIixjb25maWc6e25hbWU6IkR1Y2tEQiBXQVNNIix1cmw6ZS5nZXQoInVybCIpfHx2b2lkIDAsdXNlVG9rZW46ITEsdG9rZW46dm9pZCAwfX07ZGVmYXVsdDpjb25zb2xlLmVycm9yKCJVbmtub3duIEFQSToiLHQpO3JldHVybn19KGUpO2lmKCF0KXJldHVybjtsZXQgYT0oMCxzLnZnKSh0KTtpZigiY29ubmVjdGVkIj09PShhd2FpdCBhLmNoZWNrQ29ubmVjdGlvblN0YXRlKCkpLnN0YXRlKXJldHVybiBhfWFzeW5jIGZ1bmN0aW9uIHIoZSl7aWYoMCE9PWUubGVuZ3RoKWZvcihsZXQgdD1lLmxlbmd0aC0xO3Q+PTA7dC0tKXtsZXQgYT0oMCxzLnZnKShlW3RdKTtpZigiY29ubmVjdGVkIj09PShhd2FpdCBhLmluaXRpYWxpc2UoKSkuc3RhdGUpcmV0dXJuIGF9fWFzeW5jIGZ1bmN0aW9uIGMoZSx0KXtsZXQgYT1hd2FpdCBpKGUpO3JldHVybiBhfHxhd2FpdCByKHQpfXZhciBsPWEoMzAxMTUpLGQ9YSgzMjQ5NiksdT1hKDgyOTcxKSxoPWEoNTk2ODIpLG09YSg2MjQ1MyksZj1hKDU2NDU3KSxwPWEoMzUxMDcpLGc9YSgxMTA2NikseT1hKDg4Nzg2KSxiPWEoNjIwMDYpO2xldCB3PVsiZGF0YWJhc2UiLCJzY2hlbWEiLCJ0YWJsZSIsInZpZXciLCJjb2x1bW4iXSx4PVsidGFibGUiLCJ2aWV3IiwiY29sdW1uIl0sdj1bInRhYmxlIiwidmlldyIsImNvbHVtbiJdO2FzeW5jIGZ1bmN0aW9uIFMoZSl7cmV0dXJuIG5ldyBrKGUuaWQse25hbWU6IkR1Y2tEQiJ9KX1jbGFzcyBre2V4ZWN1dGVRdWVyeShlKXtyZXR1cm4gZC54LmdldEluc3RhbmNlKCkuZXhlY3V0ZVF1ZXJ5KGUpfWFzeW5jIGNoZWNrQ29ubmVjdGlvblN0YXRlKCl7cmV0dXJuIHRoaXMuY29ubmVjdGlvblN0YXR1cz1hd2FpdCBkLnguZ2V0SW5zdGFuY2UoKS5nZXREYXRhYmFzZUNvbm5lY3Rpb25TdGF0ZSgpLHRoaXMuY29ubmVjdGlvblN0YXR1c31hc3luYyBpbml0aWFsaXNlKCl7cmV0dXJuIHRoaXMuY2hlY2tDb25uZWN0aW9uU3RhdGUoKX1hc3luYyBsb2FkRGF0YVNvdXJjZXMoKXtyZXR1cm4oMCxoLkNfKShlPT50aGlzLmV4ZWN1dGVRdWVyeShlKSl9YXN5bmMgb25EYXRhU291cmNlQ2xpY2soZSl7YXdhaXQgKDAsaC5fWikodGhpcyxlLHRoaXMuZGF0YVNvdXJjZXMpfWxvYWRDaGlsZHJlbkZvckRhdGFTb3VyY2UoZSl7cmV0dXJuIGNvbnNvbGUuZXJyb3IoImxvYWRDaGlsZHJlbkZvckRhdGFTb3VyY2Ugbm90IGltcGxlbWVudGVkIGZvciBEdWNrREJPdmVySHR0cCIpLFByb21pc2UucmVzb2x2ZSh7fSl9YXN5bmMgdXBkYXRlQ29uZmlnKGUpe3RoaXMuY29uZmlnPXsuLi50aGlzLmNvbmZpZywuLi5lfX1jb25zdHJ1Y3RvcihlLHQpe3RoaXMudHlwZT0iZHVja2RiLWludGVybmFsLWRhdGFiYXNlcyIsdGhpcy5jb25uZWN0aW9uU3RhdHVzPXtzdGF0ZToiZGlzY29ubmVjdGVkIixtZXNzYWdlOiJDb25uZWN0aW9uU3RhdGUgbm90IGluaXRpYWxpc2VkIn0sdGhpcy5kYXRhU291cmNlcz17fSx0aGlzLmRhdGFTb3VyY2VDb250ZXh0TWVudUZhY3Rvcnk9KGUsdCk9PihmdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7bGV0IHQ9ZS50cmVlX2lkX3BhdGgubWFwKHkuTyk7cmV0dXJuIGUudHJlZV9pZF9wYXRoLmxlbmd0aDw0P3Quam9pbigiLiIpOigwLHkuTykoZS50cmVlLm5hbWUpfWFzeW5jIGZ1bmN0aW9uIGEoKXt0cnl7bGV0IGU9"
     ""
     ""
     ""
     "QifSw5NTcwMzooZSx0LGEpPT57ZnVuY3Rpb24gbihlKXtpZigwPT09ZS5yb3dzLmxlbmd0aClyZXR1cm4iRW1wdHkgcmVsYXRpb24sIENvbHVtbnM6ICIrZS5jb2x1bW5zLm1hcChlPT5lLm5hbWUpLmpvaW4oIiwgIik7bGV0IHQ9ZS5jb2x1bW5zLm1hcChlPT5lLm5hbWUpLmpvaW4oIiB8ICIpLGE9ZS5jb2x1bW5zLm1hcCgoKT0+Ii0tLSIpLmpvaW4oIiB8ICIpLG49ZS5yb3dzLm1hcChlPT5lLm1hcChlPT5TdHJpbmcoZSkpLmpvaW4oIiB8ICIpKS5qb2luKCJcbiIpO3JldHVybiJ8ICIuY29uY2F0KHQsIiB8XG58ICIpLmNvbmNhdChhLCIgfFxufCAiKS5jb25jYXQobiwiIHwiKX1mdW5jdGlvbiBvKGUsdCl7aWYoImZpbGUiPT1lLnR5cGUpcmV0dXJuW3QsZS5iYXNlTmFtZV07aWYoInF1ZXJ5Ij09ZS50eXBlKXJldHVyblt0XTtpZigidGFibGUiPT1lLnR5cGUpcmV0dXJuW3QsZS5kYXRhYmFzZSxlLnNjaGVtYSxlLnRhYmxlTmFtZV07dGhyb3cgRXJyb3IoIlVua25vd24gcmVsYXRpb24gdHlwZTogIi5jb25jYXQoZSkpfWZ1bmN0aW9uIHMoZSx0KXtpZigidGFibGUiPT09dC50eXBlKXJldHVybiJyZWxhdGlvbi10YWJsZS0iLmNvbmNhdChlLCItIikuY29uY2F0KHQuZGF0YWJhc2UsIi0iKS5jb25jYXQodC5zY2hlbWEsIi0iKS5jb25jYXQodC50YWJsZU5hbWUpO2lmKCJmaWxlIj09PXQudHlwZSlyZXR1cm4icmVsYXRpb24tZmlsZS0iLmNvbmNhdChlLCItIikuY29uY2F0KHQucGF0aCk7aWYoInF1ZXJ5Ij09PXQudHlwZSlyZXR1cm4icmVsYXRpb24tcXVlcnktIi5jb25jYXQoZSwiLSIpLmNvbmNhdCh0LmlkKTt0aHJvdyBFcnJvcigiVW5rbm93biByZWxhdGlvbiB0eXBlOiAiLmNvbmNhdCh0KSl9ZnVuY3Rpb24gaShlKXtpZigidGFibGUiPT09ZS50eXBlKXJldHVybiIiLmNvbmNhdChlLnRhYmxlTmFtZSwiIFZpZXciKTtpZigiZmlsZSI9PT1lLnR5cGUpcmV0dXJuIiIuY29uY2F0KGUuYmFzZU5hbWUsIiBWaWV3Iik7aWYoInF1ZXJ5Ij09PWUudHlwZSlyZXR1cm4gZS5uYW1lO3Rocm93IEVycm9yKCJVbmtub3duIHJlbGF0aW9uIHR5cGU6ICIuY29uY2F0KGUpKX1hLmQodCx7VEk6KCk9PnMsZTg6KCk9Pm8saG86KCk9PmkseiQ6KCk9Pm59KX0sOTgzMDg6KGUsdCxhKT0+e2EuZCh0LHtBWTooKT0+YyxDRjooKT0+aCxDbDooKT0+dSxOazooKT0+cixTaTooKT0+byxhbDooKT0+aSxiSzooKT0+ZCxlMzooKT0+cyxtMjooKT0+bH0pO3ZhciBuPWEoMzAxMTUpO2xldCBvPVsiYmFyIiwic2NhdHRlciIsImxpbmUiLCJhcmVhIiwicGllIiwicmFkYXIiXSxzPXt3aWR0aDoyLGNvbG9yOiIjMDAwMDAwIixsaW5lU3R5bGU6InNvbGlkIn0saT17dmlzaWJsZTohMCxmaWxsOiJ3aGl0ZSIscmFkaXVzOjYsYm9yZGVyV2lkdGg6MCxzaGFwZToiY2lyY2xlIn0scj17Y29sb3I6IiMwMDAwMDAiLG9wYWNpdHk6LjJ9O2Z1bmN0aW9uIGMoZSl7bGV0IHQ9bi5qaVtlJW4uamkubGVuZ3RoXTtyZXR1cm57Y29sb3I6dCxzY2F0dGVyOntkb3RzOntzaGFwZToiY2lyY2xlIix2aXNpYmxlOiEwLGZpbGw6dCxyYWRpdXM6Nixib3JkZXJXaWR0aDowfX0sbGluZTp7c3Ryb2tlOntjb2xvcjp0LHdpZHRoOjIsbGluZVN0eWxlOiJzb2xpZCJ9LHNtb290aDohMX0sYXJlYTp7ZmlsbDp7Y29sb3I6dCxvcGFjaXR5Oi4yfX0sYmFyOntjb3JuZXJSYWRpdXM6NCxmaWxsT3BhY2l0eToxLGJvcmRlcjp7d2lkdGg6MCxjb2xvcjoiIzAwMDAwMCJ9fSxwaWU6e2lubmVyUmFkaXVzOjAscGFkQW5nbGU6MCxjb3JuZXJSYWRpdXM6MCxzaG93TGFiZWxzOiEwLGxhYmVsOntjb2xvcjoiIzAwMDAwMCIsZm9udFNpemU6MTIsZm9udEZhbWlseToiVXJiYW5pc3QsIHNhbnMtc2VyaWYifX0scmFkYXI6e3N0cm9rZVdpZHRoOjIsZmlsbENvbG9yOnQsZmlsbE9wYWNpdHk6LjIsc2hvd0RvdHM6ITAsZG90U2l6ZTo2LGRvdENvbG9yOnQsZG90Qm9yZGVyV2lkdGg6MX19fWZ1bmN0aW9uIGwoKXtyZXR1cm57Y2hhcnQ6e3Bsb3Q6e3R5cGU6ImJhciIsY2FydGVzaWFuOnt4UmFuZ2U6e30seVJhbmdlOnt9LGRlY29yYXRpb246e2Jhcjp7c3RhY2tlZDohMX19LGdyb3VwQnk6dm9pZCAwfSxwaWU6e2F4aXM6e319fX0sdmlldzp7c2hvd0NvbmZpZzohMCxjb25maWdQbG90UmF0aW86LjUsbGF5b3V0OiJjb2x1bW4ifX19ZnVuY3Rpb24gZChlKXtyZXR1cm57Y2hhcnQ6e3Bsb3Q6e3R5cGU6ImJhciIsY2FydGVzaWFuOnt4UmFuZ2U6e30seVJhbmdlOnt9LGRlY29yYXRpb246e2Jhcjp7c3RhY2tlZDohMX19LGdyb3VwQnk6dm9pZCAwfSxwaWU6e2F4aXM6e319fX0sdmlldzp7c2hvd0NvbmZpZzohMCxjb25maWdQbG90UmF0aW86LjUsbGF5b3V0OiJjb2x1bW4ifX19ZnVuY3Rpb24gdShlKXtzd2l0Y2goZSl7Y2FzZSJjb25maWctbm90LWNvbXBsZXRlIjpyZXR1cm4iQ29uZmlndXJhdGlvbiBub3QgY29tcGxldGUiO2Nhc2UibWlzc2luZy1kYXRhIjpyZXR1cm4iTWlzc2luZyBkYXRhIn10aHJvdyBFcnJvcigiVW5zdXBwb3J0ZWQgZXJyb3IgdHlwZTogIi5jb25jYXQoZSkpfWZ1bmN0aW9uIGgoZSx0KXt2YXIgYSxuLG8scyxpO2xldCByPWUucGxvdDtzd2l0Y2goci50eXBlKXtjYXNlImJhciI6Y2FzZSJyYWRhciI6Y2FzZSJsaW5lIjpjYXNlInNjYXR0ZXIiOmNhc2UiYXJlYSI6aWYoKG51bGwhPT0obj1udWxsPT09KGE9ci5jYXJ0ZXNpYW4ueUF4ZXMpfHx2b2lkIDA9PT1hP3ZvaWQgMDphLmxlbmd0aCkmJnZvaWQgMCE9PW4/bjowKT09MClyZXR1cm57dHlwZToiY29uZmlnLW5vdC1jb21wbGV0ZSIsbWVzc2FnZToiUGxlYXNlIGRlZmluZSBhdCBsZWFzdCBvbmUgWS1heGlzLiJ9O2JyZWFrO2Nhc2UicGllIjppZih2b2lkIDA9PT1yLnBpZS5heGlzLmxhYmVsfHx2b2lkIDA9PT1yLnBpZS5heGlzLnJhZGl1cylyZXR1cm57dHlwZToiY29uZmlnLW5vdC1jb21wbGV0ZSIsbWVzc2FnZToiUGxlYXNlIGRlZmluZSBib3RoIHRoZSBsYWJlbCBhbmQgcmFkaXVzIGF4aXMuIn07YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcigiVW5zdXBwb3J0ZWQgcGxvdCB0eXBlOiAiLmNvbmNhdChyLnR5cGUpKX1pZihyLmNhcnRlc2lhbi5ncm91cEJ5JiZyLmNhcnRlc2lhbi54QXhpcyl7aWYoci5jYXJ0ZXNpYW4uZ3JvdXBCeS5jb2x1bW5JZD09PXIuY2FydGVzaWFuLnhBeGlzLmNvbHVtbklkKXJldHVybnt0eXBlOiJjb25maWctbm90LWNvbXBsZXRlIixtZXNzYWdlOiJHcm91cCBieSBjb2x1bW4gYW5kIHgtYXhpcyBjb2x1bW4gbXVzdCBiZSBkaWZmZXJlbnQuIn19ZWxzZSBpZihyLmNhcnRlc2lhbi5ncm91cEJ5KXtpZighci5jYXJ0ZXNpYW4ueEF4aXMpcmV0dXJue3R5cGU6ImNvbmZpZy1ub3QtY29tcGxldGUiLG1lc3NhZ2U6IlBsZWFzZSBkZWZpbmUgdGhlIHgtYXhpcyBjb2x1bW4uIn07aWYoIXIuY2FydGVzaWFuLnlBeGVzKXJldHVybnt0eXBlOiJjb25maWctbm90LWNvbXBsZXRlIixtZXNzYWdlOiJQbGVhc2UgZGVmaW5lIGF0IGxlYXN0IG9uZSBZLWF4aXMuIn07aWYoKG51bGwhPT0oaT1udWxsPT09KG89ci5jYXJ0ZXNpYW4ueUF4ZXMpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLmxlbmd0aCkmJnZvaWQgMCE9PWk/aTowKT4xKXJldHVybnt0eXBlOiJjb25maWctbm90LWNvbXBsZXRlIixtZXNzYWdlOiJHcm91cCBieSBjb2x1bW4gaXMgb25seSBzdXBwb3J0ZWQgd2l0aCBvbmUgWS1heGlzLiJ9O2Vsc2UgaWYoKG51bGw9PT0ocz1yLmNhcnRlc2lhbil8fHZvaWQgMD09PXM/dm9pZCAwOnMueUF4ZXNbMF0uY29sdW1uSWQpPT09ci5jYXJ0ZXNpYW4uZ3JvdXBCeS5jb2x1bW5JZClyZXR1cm57dHlwZToiY29uZmlnLW5vdC1jb21wbGV0ZSIsbWVzc2FnZToiR3JvdXAgYnkgY29sdW1uIGFuZCB5LWF4aXMgY29sdW1uIG11c3QgYmUgZGlmZmVyZW50LiJ9fWxldCBjPShmdW5jdGlvbihlKXtsZXQgdD1lLnBsb3Q7c3dpdGNoKHQudHlwZSl7Y2FzZSJiYXIiOmNhc2UicmFkYXIiOmNhc2UibGluZSI6Y2FzZSJzY2F0dGVyIjpjYXNlImFyZWEiOnt2YXIgYSxuO2lmKHQuY2FydGVzaWFuLmdyb3VwQnkpe2lmKHQuY2FydGVzaWFuLnhBeGlzKXJldHVyblt0LmNhcnRlc2lhbi54QXhpcy5jb2x1bW5JZF07cmV0dXJuW119bGV0IGU9bnVsbCE9PShuPW51bGw9PT0oYT10LmNhcnRlc2lhbi55QXhlcyl8fHZvaWQgMD09PWE/dm9pZCAwOmEubWFwKGU9PmUuY29sdW1uSWQpKSYmdm9pZCAwIT09bj9uOltdO3JldHVybiB0LmNhcnRlc2lhbi54QXhpcyYmZS5wdXNoKHQuY2FydGVzaWFuLnhBeGlzLmNvbHVtbklkKSxlfWNhc2UicGllIjp7bGV0IGU9W107cmV0dXJuIHQucGllLmF4aXMubGFiZWwmJmUucHVzaCh0LnBpZS5heGlzLmxhYmVsLmNvbHVtbklkKSx0LnBpZS5heGlzLnJhZGl1cyYmZS5wdXNoKHQucGllLmF4aXMucmFkaXVzLmNvbHVtbklkKSxlfWRlZmF1bHQ6dGhyb3cgRXJyb3IoIlVuc3VwcG9ydGVkIHBsb3QgdHlwZTogIi5jb25jYXQodC50eXBlKSl9fSkoZSkuZmlsdGVyKGU9PiF0LmNvbHVtbnMuZmluZCh0PT50LmlkPT09ZSkpO2lmKGMubGVuZ3RoPjApcmV0dXJuIGNvbnNvbGUud2FybigiTWlzc2luZyBjb2x1bW5zOiAiLmNvbmNhdChjLmpvaW4oIiwgIiksIiwgYXZhaWxhYmxlIGNvbHVtbnM6ICIpLmNvbmNhdCh0LmNvbHVtbnMubWFwKGU9PmUuaWQpLmpvaW4oIiwgIikpKSx7dHlwZToibWlzc2luZy1kYXRhIixtZXNzYWdlOiJNaXNzaW5nIGRhdGEgY29sdW1uczogIi5jb25jYXQoYy5qb2luKCIsICIpKX19fSw5OTE5MzooZSx0LGEpPT57YS5kKHQse0E6KCk9Pm99KTt2YXIgbj1hKDMwMTE1KTtmdW5jdGlvbiBvKCl7cmV0dXJue3N0YXRlOiJ1bmluaXRpYWxpemVkIixkZXN0aW5hdGlvbjpuLmhDfX19fV0pOw==",    //
     178384, //
     "application/javascript", //
     "/_next/static/chunks/585-469b5155f3854216.js/", //
     
};
}
