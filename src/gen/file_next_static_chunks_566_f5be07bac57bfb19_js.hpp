
#pragma once
#include "files.hpp"
namespace duckdb {
const File FILE_NEXT_STATIC_CHUNKS_566_F5BE07BAC57BFB19_JS = {
     // Content
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     ""
     "dmFsdWUpO2JyZWFrO2Nhc2UicGVuZGluZyI6Y2FzZSJibG9ja2VkIjplJiYobnVsbD09PXRoaXMudmFsdWUmJih0aGlzLnZhbHVlPVtdKSx0aGlzLnZhbHVlLnB1c2goZSkpLHQmJihudWxsPT09dGhpcy5yZWFzb24mJih0aGlzLnJlYXNvbj1bXSksdGhpcy5yZWFzb24ucHVzaCh0KSk7YnJlYWs7ZGVmYXVsdDp0JiZ0KHRoaXMucmVhc29uKX19O3ZhciBBPW51bGw7ZnVuY3Rpb24gTihlKXt2YXIgdD1BO0E9bnVsbDt2YXIgcj1lLnZhbHVlO2Uuc3RhdHVzPSJibG9ja2VkIixlLnZhbHVlPW51bGwsZS5yZWFzb249bnVsbDt0cnl7dmFyIG49SlNPTi5wYXJzZShyLGUuX3Jlc3BvbnNlLl9mcm9tSlNPTiksbz1lLnZhbHVlO2lmKG51bGwhPT1vJiYoZS52YWx1ZT1udWxsLGUucmVhc29uPW51bGwsaihvLG4pKSxudWxsIT09QSl7aWYoQS5lcnJvcmVkKXRocm93IEEudmFsdWU7aWYoMDxBLmRlcHMpe0EudmFsdWU9bixBLmNodW5rPWU7cmV0dXJufX1lLnN0YXR1cz0iZnVsZmlsbGVkIixlLnZhbHVlPW59Y2F0Y2godCl7ZS5zdGF0dXM9InJlamVjdGVkIixlLnJlYXNvbj10fWZpbmFsbHl7QT10fX1mdW5jdGlvbiBEKGUpe3RyeXt2YXIgdD1jKGUudmFsdWUpO2Uuc3RhdHVzPSJmdWxmaWxsZWQiLGUudmFsdWU9dH1jYXRjaCh0KXtlLnN0YXR1cz0icmVqZWN0ZWQiLGUucmVhc29uPXR9fWZ1bmN0aW9uIFUoZSx0KXtlLl9jbG9zZWQ9ITAsZS5fY2xvc2VkUmVhc29uPXQsZS5fY2h1bmtzLmZvckVhY2goZnVuY3Rpb24oZSl7InBlbmRpbmciPT09ZS5zdGF0dXMmJlMoZSx0KX0pfWZ1bmN0aW9uIGsoZSl7cmV0dXJueyQkdHlwZW9mOmgsX3BheWxvYWQ6ZSxfaW5pdDpSfX1mdW5jdGlvbiBMKGUsdCl7dmFyIHI9ZS5fY2h1bmtzLG49ci5nZXQodCk7cmV0dXJuIG58fChuPWUuX2Nsb3NlZD9uZXcgRSgicmVqZWN0ZWQiLG51bGwsZS5fY2xvc2VkUmVhc29uLGUpOlAoZSksci5zZXQodCxuKSksbn1mdW5jdGlvbiBJKGUsdCxyLG4sbyx1KXtmdW5jdGlvbiBsKGUpe2lmKCFhLmVycm9yZWQpe2EuZXJyb3JlZD0hMCxhLnZhbHVlPWU7dmFyIHQ9YS5jaHVuaztudWxsIT09dCYmImJsb2NrZWQiPT09dC5zdGF0dXMmJlModCxlKX19aWYoQSl7dmFyIGE9QTthLmRlcHMrK31lbHNlIGE9QT17cGFyZW50Om51bGwsY2h1bms6bnVsbCx2YWx1ZTpudWxsLGRlcHM6MSxlcnJvcmVkOiExfTtyZXR1cm4gZS50aGVuKGZ1bmN0aW9uIGUoaSl7Zm9yKHZhciBjPTE7Yzx1Lmxlbmd0aDtjKyspe2Zvcig7aS4kJHR5cGVvZj09PWg7KWlmKChpPWkuX3BheWxvYWQpPT09YS5jaHVuaylpPWEudmFsdWU7ZWxzZSBpZigiZnVsZmlsbGVkIj09PWkuc3RhdHVzKWk9aS52YWx1ZTtlbHNle3Uuc3BsaWNlKDAsYy0xKSxpLnRoZW4oZSxsKTtyZXR1cm59aT1pW3VbY11dfWM9byhuLGksdCxyKSx0W3JdPWMsIiI9PT1yJiZudWxsPT09YS52YWx1ZSYmKGEudmFsdWU9YyksdFswXT09PXAmJiJvYmplY3QiPT10eXBlb2YgYS52YWx1ZSYmbnVsbCE9PWEudmFsdWUmJmEudmFsdWUuJCR0eXBlb2Y9PT1wJiYoaT1hLnZhbHVlLCIzIj09PXIpJiYoaS5wcm9wcz1jKSxhLmRlcHMtLSwwPT09YS5kZXBzJiZudWxsIT09KGM9YS5jaHVuaykmJiJibG9ja2VkIj09PWMuc3RhdHVzJiYoaT1jLnZhbHVlLGMuc3RhdHVzPSJmdWxmaWxsZWQiLGMudmFsdWU9YS52YWx1ZSxudWxsIT09aSYmaihpLGEudmFsdWUpKX0sbCksbnVsbH1mdW5jdGlvbiBIKGUsdCxyLG4pe2lmKCFlLl9zZXJ2ZXJSZWZlcmVuY2VDb25maWcpcmV0dXJuIGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3ZhciBlPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7cmV0dXJuIG8/ImZ1bGZpbGxlZCI9PT1vLnN0YXR1cz90KG4sby52YWx1ZS5jb25jYXQoZSkpOlByb21pc2UucmVzb2x2ZShvKS50aGVuKGZ1bmN0aW9uKHIpe3JldHVybiB0KG4sci5jb25jYXQoZSkpfSk6dChuLGUpfXZhciBuPWUuaWQsbz1lLmJvdW5kO3JldHVybiBPKHIsbixvKSxyfSh0LGUuX2NhbGxTZXJ2ZXIpO3ZhciBvPWZ1bmN0aW9uKGUsdCl7dmFyIHI9IiIsbj1lW3RdO2lmKG4pcj1uLm5hbWU7ZWxzZXt2YXIgbz10Lmxhc3RJbmRleE9mKCIjIik7aWYoLTEhPT1vJiYocj10LnNsaWNlKG8rMSksbj1lW3Quc2xpY2UoMCxvKV0pLCFuKXRocm93IEVycm9yKCdDb3VsZCBub3QgZmluZCB0aGUgbW9kdWxlICInK3QrJyIgaW4gdGhlIFJlYWN0IFNlcnZlciBNYW5pZmVzdC4gVGhpcyBpcyBwcm9iYWJseSBhIGJ1ZyBpbiB0aGUgUmVhY3QgU2VydmVyIENvbXBvbmVudHMgYnVuZGxlci4nKX1yZXR1cm4gbi5hc3luYz9bbi5pZCxuLmNodW5rcyxyLDFdOltuLmlkLG4uY2h1bmtzLHJdfShlLl9zZXJ2ZXJSZWZlcmVuY2VDb25maWcsdC5pZCk7aWYoZT1pKG8pKXQuYm91bmQmJihlPVByb21pc2UuYWxsKFtlLHQuYm91bmRdKSk7ZWxzZXtpZighdC5ib3VuZClyZXR1cm4gTyhlPWMobyksdC5pZCx0LmJvdW5kKSxlO2U9UHJvbWlzZS5yZXNvbHZlKHQuYm91bmQpfWlmKEEpe3ZhciB1PUE7dS5kZXBzKyt9ZWxzZSB1PUE9e3BhcmVudDpudWxsLGNodW5rOm51bGwsdmFsdWU6bnVsbCxkZXBzOjEsZXJyb3JlZDohMX07cmV0dXJuIGUudGhlbihmdW5jdGlvbigpe3ZhciBlPWMobyk7aWYodC5ib3VuZCl7dmFyIGw9dC5ib3VuZC52YWx1ZS5zbGljZSgwKTtsLnVuc2hpZnQobnVsbCksZT1lLmJpbmQuYXBwbHkoZSxsKX1PKGUsdC5pZCx0LmJvdW5kKSxyW25dPWUsIiI9PT1uJiZudWxsPT09dS52YWx1ZSYmKHUudmFsdWU9ZSksclswXT09PXAmJiJvYmplY3QiPT10eXBlb2YgdS52YWx1ZSYmbnVsbCE9PXUudmFsdWUmJnUudmFsdWUuJCR0eXBlb2Y9PT1wJiYobD11LnZhbHVlLCIzIj09PW4pJiYobC5wcm9wcz1lKSx1LmRlcHMtLSwwPT09dS5kZXBzJiZudWxsIT09KGU9dS5jaHVuaykmJiJibG9ja2VkIj09PWUuc3RhdHVzJiYobD1lLnZhbHVlLGUuc3RhdHVzPSJmdWxmaWxsZWQiLGUudmFsdWU9dS52YWx1ZSxudWxsIT09bCYmaihsLHUudmFsdWUpKX0sZnVuY3Rpb24oZSl7aWYoIXUuZXJyb3JlZCl7dS5lcnJvcmVkPSEwLHUudmFsdWU9ZTt2YXIgdD11LmNodW5rO251bGwhPT10JiYiYmxvY2tlZCI9PT10LnN0YXR1cyYmUyh0LGUpfX0pLG51bGx9ZnVuY3Rpb24gRihlLHQscixuLG8pe3ZhciB1PXBhcnNlSW50KCh0PXQuc3BsaXQoIjoiKSlbMF0sMTYpO3N3aXRjaCgodT1MKGUsdSkpLnN0YXR1cyl7Y2FzZSJyZXNvbHZlZF9tb2RlbCI6Tih1KTticmVhaztjYXNlInJlc29sdmVkX21vZHVsZSI6RCh1KX1zd2l0Y2godS5zdGF0dXMpe2Nhc2UiZnVsZmlsbGVkIjp2YXIgbD11LnZhbHVlO2Zvcih1PTE7dTx0Lmxlbmd0aDt1Kyspe2Zvcig7bC4kJHR5cGVvZj09PWg7KWlmKCJmdWxmaWxsZWQiIT09KGw9bC5fcGF5bG9hZCkuc3RhdHVzKXJldHVybiBJKGwscixuLGUsbyx0LnNsaWNlKHUtMSkpO2Vsc2UgbD1sLnZhbHVlO2w9bFt0W3VdXX1yZXR1cm4gbyhlLGwscixuKTtjYXNlInBlbmRpbmciOmNhc2UiYmxvY2tlZCI6cmV0dXJuIEkodSxyLG4sZSxvLHQpO2RlZmF1bHQ6cmV0dXJuIEE/KEEuZXJyb3JlZD0hMCxBLnZhbHVlPXUucmVhc29uKTpBPXtwYXJlbnQ6bnVsbCxjaHVuazpudWxsLHZhbHVlOnUucmVhc29uLGRlcHM6MCxlcnJvcmVkOiEwfSxudWxsfX1mdW5jdGlvbiBCKGUsdCl7cmV0dXJuIG5ldyBNYXAodCl9ZnVuY3Rpb24gVyhlLHQpe3JldHVybiBuZXcgU2V0KHQpfWZ1bmN0aW9uICQoZSx0KXtyZXR1cm4gbmV3IEJsb2IodC5zbGljZSgxKSx7dHlwZTp0WzBdfSl9ZnVuY3Rpb24gSyhlLHQpe2U9bmV3IEZvcm1EYXRhO2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKWUuYXBwZW5kKHRbcl1bMF0sdFtyXVsxXSk7cmV0dXJuIGV9ZnVuY3Rpb24gWChlLHQpe3JldHVybiB0W1N5bWJvbC5pdGVyYXRvcl0oKX1mdW5jdGlvbiB6KGUsdCl7cmV0dXJuIHR9ZnVuY3Rpb24gRygpe3Rocm93IEVycm9yKCdUcnlpbmcgdG8gY2FsbCBhIGZ1bmN0aW9uIGZyb20gInVzZSBzZXJ2ZXIiIGJ1dCB0aGUgY2FsbFNlcnZlciBvcHRpb24gd2FzIG5vdCBpbXBsZW1lbnRlZCBpbiB5b3VyIHJvdXRlciBydW50aW1lLicpfWZ1bmN0aW9uIFYoZSx0LHIsbixvLHUsbCl7dmFyIGEsaT1uZXcgTWFwO3RoaXMuX2J1bmRsZXJDb25maWc9ZSx0aGlzLl9zZXJ2ZXJSZWZlcmVuY2VDb25maWc9dCx0aGlzLl9tb2R1bGVMb2FkaW5nPXIsdGhpcy5fY2FsbFNlcnZlcj12b2lkIDAhPT1uP246Ryx0aGlzLl9lbmNvZGVGb3JtQWN0aW9uPW8sdGhpcy5fbm9uY2U9dSx0aGlzLl9jaHVua3M9aSx0aGlzLl9zdHJpbmdEZWNvZGVyPW5ldyBUZXh0RGVjb2Rlcix0aGlzLl9mcm9tSlNPTj1udWxsLHRoaXMuX3Jvd0xlbmd0aD10aGlzLl9yb3dUYWc9dGhpcy5fcm93SUQ9dGhpcy5fcm93U3RhdGU9MCx0aGlzLl9idWZmZXI9W10sdGhpcy5fY2xvc2VkPSExLHRoaXMuX2Nsb3NlZFJlYXNvbj1udWxsLHRoaXMuX3RlbXBSZWZzPWwsdGhpcy5fZnJvbUpTT049KGE9dGhpcyxmdW5jdGlvbihlLHQpe2lmKCJzdHJpbmciPT10eXBlb2YgdClyZXR1cm4gZnVuY3Rpb24oZSx0LHIsbil7aWYoIiQiPT09blswXSl7aWYoIiQiPT09bilyZXR1cm4gbnVsbCE9PUEmJiIwIj09PXImJihBPXtwYXJlbnQ6QSxjaHVuazpudWxsLHZhbHVlOm51bGwsZGVwczowLGVycm9yZWQ6ITF9KSxwO3N3aXRjaChuWzFdKXtjYXNlIiQiOnJldHVybiBuLnNsaWNlKDEpO2Nhc2UiTCI6cmV0dXJuIGsoZT1MKGUsdD1wYXJzZUludChuLnNsaWNlKDIpLDE2KSkpO2Nhc2UiQCI6aWYoMj09PW4ubGVuZ3RoKXJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbigpe30pO3JldHVybiBMKGUsdD1wYXJzZUludChuLnNsaWNlKDIpLDE2KSk7Y2FzZSJTIjpyZXR1cm4gU3ltYm9sLmZvcihuLnNsaWNlKDIpKTtjYXNlIkYiOnJldHVybiBGKGUsbj1uLnNsaWNlKDIpLHQscixIKTtjYXNlIlQiOmlmKHQ9IiQiK24uc2xpY2UoMiksbnVsbD09KGU9ZS5fdGVtcFJlZnMpKXRocm93IEVycm9yKCJNaXNzaW5nIGEgdGVtcG9yYXJ5IHJlZmVyZW5jZSBzZXQgYnV0IHRoZSBSU0MgcmVzcG9uc2UgcmV0dXJuZWQgYSB0ZW1wb3JhcnkgcmVmZXJlbmNlLiBQYXNzIGEgdGVtcG9yYXJ5UmVmZXJlbmNlIG9wdGlvbiB3aXRoIHRoZSBzZXQgdGhhdCB3YXMgdXNlZCB3aXRoIHRoZSByZXBseS4iKTtyZXR1cm4gZS5nZXQodCk7Y2FzZSJRIjpyZXR1cm4gRihlLG49bi5zbGljZSgyKSx0LHIsQik7Y2FzZSJXIjpyZXR1cm4gRihlLG49bi5zbGljZSgyKSx0LHIsVyk7Y2FzZSJCIjpyZXR1cm4gRihlLG49bi5zbGljZSgyKSx0LHIsJCk7Y2FzZSJLIjpyZXR1cm4gRihlLG49bi5zbGljZSgyKSx0LHIsSyk7Y2FzZSJaIjpyZXR1cm4gZWUoKTtjYXNlImkiOnJldHVybiBGKGUsbj1uLnNsaWNlKDIpLHQscixYKTtjYXNlIkkiOnJldHVybiAxLzA7Y2FzZSItIjpyZXR1cm4iJC0wIj09PW4/LTA6LTEvMDtjYXNlIk4iOnJldHVybiBOYU47Y2FzZSJ1IjpyZXR1cm47Y2FzZSJEIjpyZXR1cm4gbmV3IERhdGUoRGF0ZS5wYXJzZShuLnNsaWNlKDIpKSk7Y2FzZSJuIjpyZXR1cm4gQmlnSW50KG4uc2xpY2UoMikpO2RlZmF1bHQ6cmV0dXJuIEYoZSxuPW4uc2xpY2UoMSksdCxyLHopfX1yZXR1cm4gbn0oYSx0aGlzLGUsdCk7aWYoIm9iamVjdCI9PXR5cGVvZiB0JiZudWxsIT09dCl7aWYodFswXT09PXApe2lmKGU9eyQkdHlwZW9mOnAsdHlwZTp0WzFdLGtleTp0WzJdLHJlZjpudWxsLHByb3BzOnRbM119LG51bGwhPT1BKXtpZihBPSh0PUEpLnBhcmVudCx0LmVycm9yZWQpZT1rKGU9bmV3IEUoInJlamVjdGVkIixudWxsLHQudmFsdWUsYSkpO2Vsc2UgaWYoMDx0LmRlcHMpe3ZhciByPW5ldyBFKCJibG9ja2VkIixudWxsLG51bGwsYSk7dC52YWx1ZT1lLHQuY2h1bms9cixlPWsocil9fX1lbHNlIGU9dDtyZXR1cm4gZX1yZXR1cm4gdH0pfWZ1bmN0aW9uIFkoZSx0LHIpe3ZhciBuPWUuX2NodW5rcyxvPW4uZ2V0KHQpO28mJiJwZW5kaW5nIiE9PW8uc3RhdHVzP28ucmVhc29uLmVucXVldWVWYWx1ZShyKTpuLnNldCh0LG5ldyBFKCJmdWxmaWxsZWQiLHIsbnVsbCxlKSl9ZnVuY3Rpb24gcShlLHQscixuKXt2YXIgbz1lLl9jaHVua3MsdT1vLmdldCh0KTt1PyJwZW5kaW5nIj09PXUuc3RhdHVzJiYoZT11LnZhbHVlLHUuc3RhdHVzPSJmdWxmaWxsZWQiLHUudmFsdWU9cix1LnJlYXNvbj1uLG51bGwhPT1lJiZqKGUsdS52YWx1ZSkpOm8uc2V0KH"
     ""
     ""
     ""
     "PT10eXBlb2YgciYmbnVsbCE9PXImJiJmdW5jdGlvbiI9PXR5cGVvZiByLnRoZW4/KDAsbC51c2UpKHIpOnIpe2xldCBlPXRbMF0scj10WzFdLG89dFsyXTtyZXR1cm4oMCx1LmpzeCkobC5TdXNwZW5zZSx7ZmFsbGJhY2s6KDAsdS5qc3hzKSh1LkZyYWdtZW50LHtjaGlsZHJlbjpbcixvLGVdfSksY2hpbGRyZW46bn0pfXJldHVybigwLHUuanN4KSh1LkZyYWdtZW50LHtjaGlsZHJlbjpufSl9ZnVuY3Rpb24gaihlKXtsZXR7cGFyYWxsZWxSb3V0ZXJLZXk6dCxlcnJvcjpyLGVycm9yU3R5bGVzOm4sZXJyb3JTY3JpcHRzOm8sdGVtcGxhdGVTdHlsZXM6YSx0ZW1wbGF0ZVNjcmlwdHM6Yyx0ZW1wbGF0ZTpzLG5vdEZvdW5kOmQsZm9yYmlkZGVuOnAsdW5hdXRob3JpemVkOmJ9PWUsZz0oMCxsLnVzZUNvbnRleHQpKGkuTGF5b3V0Um91dGVyQ29udGV4dCk7aWYoIWcpdGhyb3cgT2JqZWN0LmRlZmluZVByb3BlcnR5KEVycm9yKCJpbnZhcmlhbnQgZXhwZWN0ZWQgbGF5b3V0IHJvdXRlciB0byBiZSBtb3VudGVkIiksIl9fTkVYVF9FUlJPUl9DT0RFIix7dmFsdWU6IkU1NiIsZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtsZXR7cGFyZW50VHJlZTp2LHBhcmVudENhY2hlTm9kZTptLHBhcmVudFNlZ21lbnRQYXRoOk8sdXJsOmp9PWcsVD1tLnBhcmFsbGVsUm91dGVzLFM9VC5nZXQodCk7U3x8KFM9bmV3IE1hcCxULnNldCh0LFMpKTtsZXQgTT12WzBdLHc9dlsxXVt0XSx4PXdbMF0sQz1udWxsPT09Tz9bdF06Ty5jb25jYXQoW00sdF0pLEE9KDAsXy5jcmVhdGVSb3V0ZXJDYWNoZUtleSkoeCksTj0oMCxfLmNyZWF0ZVJvdXRlckNhY2hlS2V5KSh4LCEwKSxEPVMuZ2V0KEEpO2lmKHZvaWQgMD09PUQpe2xldCBlPXtsYXp5RGF0YTpudWxsLHJzYzpudWxsLHByZWZldGNoUnNjOm51bGwsaGVhZDpudWxsLHByZWZldGNoSGVhZDpudWxsLHBhcmFsbGVsUm91dGVzOm5ldyBNYXAsbG9hZGluZzpudWxsfTtEPWUsUy5zZXQoQSxlKX1sZXQgVT1tLmxvYWRpbmc7cmV0dXJuKDAsdS5qc3hzKShpLlRlbXBsYXRlQ29udGV4dC5Qcm92aWRlcix7dmFsdWU6KDAsdS5qc3gpKEUse3NlZ21lbnRQYXRoOkMsY2hpbGRyZW46KDAsdS5qc3gpKGYuRXJyb3JCb3VuZGFyeSx7ZXJyb3JDb21wb25lbnQ6cixlcnJvclN0eWxlczpuLGVycm9yU2NyaXB0czpvLGNoaWxkcmVuOigwLHUuanN4KShQLHtsb2FkaW5nOlUsY2hpbGRyZW46KDAsdS5qc3gpKHkuSFRUUEFjY2Vzc0ZhbGxiYWNrQm91bmRhcnkse25vdEZvdW5kOmQsZm9yYmlkZGVuOnAsdW5hdXRob3JpemVkOmIsY2hpbGRyZW46KDAsdS5qc3gpKGguUmVkaXJlY3RCb3VuZGFyeSx7Y2hpbGRyZW46KDAsdS5qc3gpKFIse3VybDpqLHRyZWU6dyxjYWNoZU5vZGU6RCxzZWdtZW50UGF0aDpDfSl9KX0pfSl9KX0pLGNoaWxkcmVuOlthLGMsc119LE4pfSgiZnVuY3Rpb24iPT10eXBlb2YgdC5kZWZhdWx0fHwib2JqZWN0Ij09dHlwZW9mIHQuZGVmYXVsdCYmbnVsbCE9PXQuZGVmYXVsdCkmJnZvaWQgMD09PXQuZGVmYXVsdC5fX2VzTW9kdWxlJiYoT2JqZWN0LmRlZmluZVByb3BlcnR5KHQuZGVmYXVsdCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksT2JqZWN0LmFzc2lnbih0LmRlZmF1bHQsdCksZS5leHBvcnRzPXQuZGVmYXVsdCl9fV0pOw==",    //
     231492, //
     "application/javascript", //
     "/_next/static/chunks/566-f5be07bac57bfb19.js/", //
     
};
}
